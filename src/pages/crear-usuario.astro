---
import "../styles/global.css";
---

<html>
  <head>
    <title>Crear Usuario</title>
  </head>
  <body class="flex items-center justify-center min-h-screen bg-gray-100">
    <form id="formularioUsuario" class="bg-white p-6 rounded shadow-md w-80">
      <label for="uid" class="block text-gray-700">UID:</label>
      <input
        type="text"
        id="uid"
        name="uid"
        readonly
        class="w-full px-3 py-2 border border-gray-300 rounded mb-4 bg-gray-100"
      />
      <label for="nombre" class="block text-gray-700 mb-2">Nombre:</label>
      <input
        type="text"
        id="nombre"
        name="nombre"
        required
        class="w-full px-3 py-2 border border-gray-300 rounded mb-4"
      />
      <button
        type="submit"
        class="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600"
      >
        Guardar
      </button>
      </form>

    <script>
      // Variable para almacenar la instancia del WebSocket.
      let socket;

      // Evento que se ejecuta cuando el contenido HTML del DOM ha sido completamente cargado y parseado.
      window.addEventListener("DOMContentLoaded", () => {
        // Obtiene la referencia al elemento de input con el ID 'uid'.
        const uidInput = document.getElementById("uid");
        // Crea una nueva instancia del WebSocket, conect√°ndose al servidor en la misma direcci√≥n y puerto
        // donde se est√° sirviendo la p√°gina, en la ruta '/ws'.
        socket = new WebSocket("ws://" + window.location.host + "/ws");

        // Evento que se ejecuta cuando la conexi√≥n WebSocket se establece correctamente.
        socket.onopen = () => {
          console.log("‚úÖ WebSocket conectado");
        };

        // Evento que se ejecuta cuando el servidor WebSocket env√≠a un mensaje al cliente.
        socket.onmessage = (event) => {
          console.log("üì• UID recibido:", event.data);
          // Asigna el dato recibido (el UID) al valor del campo de entrada 'uid'.
          uidInput.value = event.data;
        };

        // Evento que se ejecuta cuando ocurre un error en la conexi√≥n WebSocket.
        socket.onerror = (error) => {
          console.error("‚ùå Error WebSocket:", error);
        };
      });

      // Obtiene la referencia al formulario con el ID 'formularioUsuario' y agrega un listener para el evento 'submit'.
      document.getElementById("formularioUsuario").addEventListener("submit", async (event) => {
        // Previene el comportamiento por defecto del formulario al ser enviado (recargar la p√°gina).
        event.preventDefault();

        // Obtiene los valores del campo de entrada 'uid' y 'nombre'.
        const uid = document.getElementById("uid").value;
        const nombre = document.getElementById("nombre").value;

        // Verifica si el UID est√° disponible. Si no lo est√°, muestra una alerta y detiene el proceso.
        if (!uid) {
          alert("‚ö†Ô∏è UID no disponible.");
          return;
        }

        try {
          // Realiza una petici√≥n POST a la API en la ruta '/api/usuarios' para guardar el nuevo usuario.
          const response = await fetch("/api/usuarios", {
            method: "POST",
            headers: {
              "Content-Type": "application/json", // Indica que el cuerpo de la petici√≥n es JSON.
            },
            body: JSON.stringify({ nombre, uuid: uid }), // Convierte el objeto con nombre y UID a una cadena JSON.
          });

          // Verifica si la respuesta de la API fue exitosa (c√≥digo de estado HTTP en el rango 200-299).
          if (!response.ok) {
            // Si la respuesta no es exitosa, intenta parsear el cuerpo como JSON para obtener un mensaje de error.
            const errorData = await response.json();
            // Lanza un nuevo error con el mensaje proporcionado por la API o un mensaje gen√©rico.
            throw new Error(errorData.error || "Error al guardar usuario");
          }

          // Si la respuesta es exitosa, parsea el cuerpo como JSON para obtener los datos del usuario guardado.
          const data = await response.json();
          console.log("‚úÖ Usuario guardado:", data);
          // Muestra una alerta indicando que el usuario se guard√≥ correctamente.
          alert("‚úÖ Usuario guardado correctamente");

          // Limpia el valor del campo de entrada 'nombre' despu√©s de guardar el usuario.
          document.getElementById("nombre").value = "";
        } catch (error) {
          // Si ocurre alg√∫n error durante la petici√≥n o el procesamiento de la respuesta,
          // lo imprime en la consola y muestra una alerta con el mensaje de error.
          console.error("‚ùå Error al guardar usuario:", error);
          alert("‚ùå Error: " + error.message);
        }
      });
    </script>
  </body>
</html>