---
import { useState, useEffect } from 'react';
import "../styles/global.css";

---

<div id="grafico-container" class="p-6 bg-white border border-gray-200 rounded-2xl shadow-lg max-w-3xl mx-auto mt-8" style="max-height: 600px;">
  <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">游늵 Datos de los 칰ltimos 10 d칤as</h2>

  <div id="loading" class="flex flex-col items-center justify-center py-8 text-blue-500 animate-pulse">
    <svg class="w-10 h-10 mb-2 animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
    </svg>
    <span class="text-lg font-medium">Cargando datos...</span>
  </div>

  <div id="error-message" class="hidden text-red-600 bg-red-100 border border-red-300 rounded-md px-4 py-3 text-center mb-4"></div>

  <canvas id="grafico" class="hidden w-full h-72 max-w-full"></canvas>

  <div class="mt-6 text-center">
    <button id="reload-button" class="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white text-sm font-semibold rounded-lg shadow hover:bg-blue-700 transition">
      游댃 Recargar datos
    </button>
  </div>
</div>

<script>
  // Importa la librer칤a Chart.js para la creaci칩n de gr치ficos
  import Chart from 'chart.js/auto';

  /**
   * Formatea una cadena de fecha en formato YYYY-MM-DD a un formato legible para el usuario (DD/MM/YYYY).
   * @param {string} fechaStr - La cadena de fecha en formato YYYY-MM-DD.
   * @returns {string} - La fecha formateada en formato DD/MM/YYYY.
   */
  function formatearFecha(fechaStr) {
    const fecha = new Date(fechaStr);
    return fecha.toLocaleDateString('es-ES', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }

  /**
   * Realiza una petici칩n as칤ncrona al servidor para obtener los datos de los 칰ltimos 10 d칤as.
   * Muestra un indicador de carga mientras se obtienen los datos y maneja posibles errores.
   * Si los datos se obtienen correctamente, llama a la funci칩n para crear el gr치fico.
   */
  async function obtenerDatos() {
    try {
      // Obtiene referencias a los elementos del DOM para la carga, error y el canvas del gr치fico.
      const loadingElement = document.getElementById('loading');
      const errorElement = document.getElementById('error-message');
      const canvasElement = document.getElementById('grafico');

      // Muestra el indicador de carga y oculta el mensaje de error y el gr치fico.
      loadingElement.classList.remove('hidden');
      errorElement.classList.add('hidden');
      canvasElement.classList.add('hidden');

      // Realiza la petici칩n GET a la API para obtener los datos de los 칰ltimos 10 d칤as.
      const response = await fetch('/api/taller/ultimos-10-dias');

      // Si la respuesta del servidor no es exitosa, lanza un error.
      if (!response.ok) {
        throw new Error('Error al obtener los datos del servidor');
      }

      // Parsea la respuesta del servidor como JSON.
      const data = await response.json();

      // Verifica si la estructura de los datos recibidos es la esperada.
      if (!data.datos || !Array.isArray(data.datos)) {
        throw new Error('Formato de datos incorrecto');
      }

      // Oculta el indicador de carga y muestra el canvas del gr치fico.
      loadingElement.classList.add('hidden');
      canvasElement.classList.remove('hidden');

      // Llama a la funci칩n para crear el gr치fico con los datos obtenidos.
      crearGrafico(data.datos);
    } catch (error) {
      // Captura cualquier error ocurrido durante la petici칩n o el procesamiento de los datos.
      console.error('Error:', error);
      // Oculta el indicador de carga.
      document.getElementById('loading').classList.add('hidden');
      // Muestra el mensaje de error en la interfaz de usuario.
      const errorElement = document.getElementById('error-message');
      errorElement.textContent = error.message || 'Error al cargar los datos';
      errorElement.classList.remove('hidden');
    }
  }

  /**
   * Crea un gr치fico de l칤neas utilizando Chart.js para visualizar la cantidad de registros por fecha.
   * @param {Array<Object>} datos - Un array de objetos donde cada objeto tiene las propiedades 'fecha' y 'cantidad'.
   */
  function crearGrafico(datos) {
    // Ordena los datos por fecha para asegurar que el gr치fico se muestre cronol칩gicamente.
    const datosOrdenados = [...datos].sort((a, b) => new Date(a.fecha) - new Date(b.fecha));
    // Extrae las fechas formateadas del array de datos ordenados.
    const fechas = datosOrdenados.map(item => formatearFecha(item.fecha));
    // Extrae las cantidades del array de datos ordenados.
    const cantidades = datosOrdenados.map(item => item.cantidad);

    // Obtiene el contexto 2D del elemento canvas donde se dibujar치 el gr치fico.
    const ctx = document.getElementById('grafico').getContext('2d');

    // Destruye la instancia del gr치fico existente si hay una, para evitar conflictos al recargar los datos.
    if (window.graficoInstancia) {
        window.graficoInstancia.destroy();
    }

    // Calcula el valor m치ximo de los datos y a침ade un margen del 20% para el eje Y.
    const maxDataValue = Math.max(...cantidades);
    const suggestedMax = maxDataValue === 0 ? 10 : Math.ceil(maxDataValue * 1.2);

    // Crea una nueva instancia del gr치fico de l칤neas con los datos y opciones configuradas.
    window.graficoInstancia = new Chart(ctx, {
        type: 'line',
        data: {
            labels: fechas, // Etiquetas del eje X (fechas).
            datasets: [{
                label: 'Cantidad de registros', // Etiqueta del conjunto de datos.
                data: cantidades, // Datos del eje Y (cantidades).
                borderColor: '#3b82f6', // Color de la l칤nea.
                backgroundColor: 'rgba(59, 130, 246, 0.2)', // Color de fondo bajo la l칤nea.
                tension: 0.3, // Suavidad de la curva de la l칤nea.
                fill: true, // Rellena el 치rea bajo la l칤nea.
                pointBackgroundColor: '#2563eb', // Color de los puntos.
                pointRadius: 5, // Radio de los puntos.
                pointHoverRadius: 7 // Radio de los puntos al pasar el rat칩n.
            }]
        },
        options: {
            responsive: true, // Hace que el gr치fico sea responsive.
            maintainAspectRatio: false, // Permite ajustar la altura del gr치fico.
            aspectRatio: 2, // Relaci칩n de aspecto inicial del gr치fico.
            scales: {
                y: {
                    beginAtZero: true, // El eje Y comienza en 0.
                    ticks: {
                        precision: 0, // No muestra decimales en las etiquetas del eje Y.
                        stepSize: maxDataValue < 10 ? 1 : Math.ceil(maxDataValue / 10) // Define un tama침o de paso adecuado para las etiquetas del eje Y.
                    },
                    suggestedMin: 0, // Valor m칤nimo sugerido para el eje Y.
                    suggestedMax: suggestedMax // Valor m치ximo sugerido para el eje Y.
                }
            },
            plugins: {
                legend: {
                    display: true, // Muestra la leyenda del gr치fico.
                    position: 'top' // Posici칩n de la leyenda.
                },
                tooltip: {
                    callbacks: {
                        title: (items) => `Fecha: ${items[0].label}`, // Formato del t칤tulo del tooltip.
                        label: (item) => `Registros: ${item.raw}` // Formato de la etiqueta del tooltip.
                    }
                }
            }
        }
    });
}

  // Evento que se ejecuta cuando el contenido HTML del DOM ha sido completamente cargado y parseado.
  document.addEventListener('DOMContentLoaded', () => {
    // Llama a la funci칩n para obtener y mostrar los datos del gr치fico al cargar la p치gina.
    obtenerDatos();
  });

  // Obtiene la referencia al bot칩n de recarga y agrega un listener para el evento 'click'.
  document.getElementById('reload-button')?.addEventListener('click', () => {
    // Llama a la funci칩n para obtener y actualizar los datos del gr치fico al hacer clic en el bot칩n de recarga.
    obtenerDatos();
  });
</script>