---
import { useState, useEffect } from 'react';
import "../styles/global.css";

---

<div id="grafico-container" class="p-6 bg-white border border-gray-200 rounded-2xl shadow-lg max-w-3xl mx-auto mt-8" style="max-height: 600px;">
  <h2 class="text-2xl font-semibold text-gray-800 mb-6 text-center">ðŸ“Š Datos de los Ãºltimos 10 dÃ­as</h2>

  <!-- Cargando -->
  <div id="loading" class="flex flex-col items-center justify-center py-8 text-blue-500 animate-pulse">
    <svg class="w-10 h-10 mb-2 animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path>
    </svg>
    <span class="text-lg font-medium">Cargando datos...</span>
  </div>

  <!-- Error -->
  <div id="error-message" class="hidden text-red-600 bg-red-100 border border-red-300 rounded-md px-4 py-3 text-center mb-4"></div>

  <!-- GrÃ¡fico -->
  <canvas id="grafico" class="hidden w-full h-72 max-w-full"></canvas>

  <!-- BotÃ³n recargar -->
  <div class="mt-6 text-center">
    <button id="reload-button" class="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white text-sm font-semibold rounded-lg shadow hover:bg-blue-700 transition">
      ðŸ”„ Recargar datos
    </button>
  </div>
</div>

<script>
  import Chart from 'chart.js/auto';

  function formatearFecha(fechaStr) {
    const fecha = new Date(fechaStr);
    return fecha.toLocaleDateString('es-ES', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }

  async function obtenerDatos() {
    try {
      const loadingElement = document.getElementById('loading');
      const errorElement = document.getElementById('error-message');
      const canvasElement = document.getElementById('grafico');

      loadingElement.classList.remove('hidden');
      errorElement.classList.add('hidden');
      canvasElement.classList.add('hidden');

      const response = await fetch('/api/taller/ultimos-10-dias');

      if (!response.ok) {
        throw new Error('Error al obtener los datos del servidor');
      }

      const data = await response.json();

      if (!data.datos || !Array.isArray(data.datos)) {
        throw new Error('Formato de datos incorrecto');
      }

      loadingElement.classList.add('hidden');
      canvasElement.classList.remove('hidden');

      crearGrafico(data.datos);
    } catch (error) {
      console.error('Error:', error);
      document.getElementById('loading').classList.add('hidden');
      const errorElement = document.getElementById('error-message');
      errorElement.textContent = error.message || 'Error al cargar los datos';
      errorElement.classList.remove('hidden');
    }
  }

  function crearGrafico(datos) {
    const datosOrdenados = [...datos].sort((a, b) => new Date(a.fecha) - new Date(b.fecha));
    const fechas = datosOrdenados.map(item => formatearFecha(item.fecha));
    const cantidades = datosOrdenados.map(item => item.cantidad);

    const ctx = document.getElementById('grafico').getContext('2d');

    if (window.graficoInstancia) {
        window.graficoInstancia.destroy();
    }

    // Calcular el mÃ¡ximo de los datos con un margen del 20%
    const maxDataValue = Math.max(...cantidades);
    const suggestedMax = maxDataValue === 0 ? 10 : Math.ceil(maxDataValue * 1.2);

    window.graficoInstancia = new Chart(ctx, {
        type: 'line',
        data: {
            labels: fechas,
            datasets: [{
                label: 'Cantidad de registros',
                data: cantidades,
                borderColor: '#3b82f6',
                backgroundColor: 'rgba(59, 130, 246, 0.2)',
                tension: 0.3,
                fill: true,
                pointBackgroundColor: '#2563eb',
                pointRadius: 5,
                pointHoverRadius: 7
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            aspectRatio: 2,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0,
                        // Establecer un step size adecuado
                        stepSize: maxDataValue < 10 ? 1 : Math.ceil(maxDataValue / 10)
                    },
                    suggestedMin: 0,
                    suggestedMax: suggestedMax
                }
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'top'
                },
                tooltip: {
                    callbacks: {
                        title: (items) => `Fecha: ${items[0].label}`,
                        label: (item) => `Registros: ${item.raw}`
                    }
                }
            }
        }
    });
}

  document.addEventListener('DOMContentLoaded', () => {
    obtenerDatos();
  });

  document.getElementById('reload-button')?.addEventListener('click', () => {
    obtenerDatos();
  });
</script>
